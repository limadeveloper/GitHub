# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

fastlane_require 'nokogiri'

TestResult = Struct.new(:total, :failed)

platform :ios do

  # -----------------------
  # before all lanes
  # -----------------------
  before_all do |lane|
    sh("if [ -d ../reports ]; then rm -Rf ../reports; fi")
    sh("if [ -f *.xml ]; then rm -f *.xml; fi")
    sh("bundle update")
    sh("bundle exec pod install --repo-update")
  end

  # -----------------------
  # lanes
  # -----------------------
  lane :tests do
    scan(
      xcargs: "ONLY_ACTIVE_ARCH=YES",
      workspace: "Github.xcworkspace",
      scheme: "Github",
      code_coverage: true,
      output_directory: "reports",
      fail_build: false,
      device: "iPhone 8"
    )
  end

  lane :build do
    tests
    run_lint_and_coverage()
    failed_tests = Integer(get_number_of_tests().failed)
    total_tests = Integer(get_number_of_tests().total)
    if failed_tests > 0 && total_tests > 0
      error_message = "❌ Failed tests"
      on_error(error_message)
    elsif failed_tests == 0 && total_tests == 0
      error_message = "⚠️ No tests available"
      on_error(error_message)
    else
      on_success()
    end
  end

  # -----------------------
  # functions
  # -----------------------
  def run_lint_and_coverage()
    swiftlint(output_file: "reports/swiftlint.txt", ignore_exit_status: true)
    slather(html: true, configuration: "Debug", scheme: "Github", proj: "Github.xcodeproj", workspace: "Github.xcworkspace", output_directory: "reports/slather/coverage", ignore: get_files_to_ignore())
    slather(cobertura_xml: true, configuration: "Debug", scheme: "Github", proj: "Github.xcodeproj", workspace: "Github.xcworkspace", output_directory: "reports/slather", ignore: get_files_to_ignore())
  end

  def get_number_of_tests()
    path = '../reports/report.junit'
    doc = Nokogiri::XML(File.open(path))
    tests = doc.xpath("//testsuites[@tests]")
    
    total = tests[0].attr('tests')
    totalValue = "#{ sprintf '%.0f', total.to_f }"
    
    failed = tests[0].attr('failures')
    failedValue = "#{ sprintf '%.0f', failed.to_f }"
    
    result = TestResult.new(total, failed)

    return result
  end

  def get_failed_tests()
    path = '../reports/report.junit'
    doc = Nokogiri::XML(File.open(path))

    node_tree = doc.css('testcase')
    failedTests = node_tree.map do |node|
      if node.first_element_child
        "• `#{ node.values[0].split('.')[1].to_s }` - _#{ node.values[1].to_s }_"
      end
    end.select {|str| !str.nil? && !str.empty? }
    
    return failedTests.join("\n")
  end

  def get_branch_coverage()
    if File.file?('../reports/slather/cobertura.xml')
      coberturaPath = '../reports/slather/cobertura.xml'
      doc = Nokogiri::XML(File.open(coberturaPath))
      coverages = doc.xpath("//coverage[@line-rate]")
      coverage = coverages[0].attr('line-rate')
      branchCoverage = "#{ sprintf '%.2f', coverage.to_f * 100 }%"
      return branchCoverage
    else
      return "-"
    end
  end

  def get_code_smells()
    if File.file?('../reports/swiftlint.txt')
      codeSmells = File.foreach('../reports/swiftlint.txt').inject(0) {|c, line| c+1}
      return codeSmells
    else
      return "-"
    end
  end

  def get_files_to_ignore()
    result = [
      '**/GithubTests/*',
      '**/Third/*',
      'Pods/*',
    ]
  end

  def get_slack_webhook()
    result = "https://hooks.slack.com/services/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"
    return result
  end

  def on_success()
    slack(
      pretext: "*GITHUB APP ANALYSIS SUCCESSFULLY*",
      message: "*Author:* #{ last_git_commit[:author] } \n*Author email:* #{ last_git_commit[:author_email] } \n*Branch coverage:* #{ get_branch_coverage() } \n*Code smells:* #{ get_code_smells() } \n*Total tests:* #{ get_number_of_tests().total } \n*Branch name:* #{ Actions.git_branch.to_s } \n*Commit message:* #{ Actions.last_git_commit_message.to_s }",
      success: true,
      slack_url: get_slack_webhook(),
      default_payloads: [:test_result]
    )
  end

  def on_error(exception)
    number_of_tests = get_number_of_tests()
    slack(
      pretext: "*GITHUB APP ANALYSIS FAIL*",
      message: "*Author:* #{ last_git_commit[:author] } \n*Author email:* #{ last_git_commit[:author_email] } \n*Branch coverage:* #{ get_branch_coverage() } \n*Code smells:* #{ get_code_smells() } \n*Number of tests:* #{ number_of_tests.total } \n*Number of failed tests:* #{ number_of_tests.failed } \n*Branch name:* #{ Actions.git_branch.to_s } \n*Commit message:* #{ Actions.last_git_commit_message.to_s }",
      success: false,
      slack_url: get_slack_webhook(),
      payload: {
        "Error message" => exception.to_s,
        "Failed Tests" => get_failed_tests()
      },
      default_payloads: [:test_result]
    )
  end
end